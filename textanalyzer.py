#----------------------Helper Functions----------------------import mathdef clean_text(txt):    """takes a string of text txt as a parameter       and returns a list containing the words in txt       after it has been "cleaned".    """    x = ""    for y in txt:        if y not in """.?,;!:'()[]"-{}*""":            x += y    x = x.lower()    return x.split()def split_sentences(txt):    """returns a 2D list of sentences with the individual words of each sentence    """    #split the string into sentences    #split those sentences by the spaces to make each sentence a list of words    txt = txt.replace('!', '.')    txt = txt.replace('?', '.')    split_txt = txt.split()    list_of_sentences = []    sentence = []    for word in split_txt:        if ('.' in word) == False:            sentence += [word]        elif ('.' in word) == True:            sentence += [word]            list_of_sentences += [sentence]            sentence = []    return list_of_sentences           def stem(s):    """accepts a string as a parameter. Returns the       stem (root part of a word) of s.     """    if s in ['a', 'an', 'the']:        return s        if s[-3:] == 'ing':        if len(s) >= 5:            if s[-4] == s[-5]:                s = s[:-4]            else:                 s = s[:-3]    elif s[-1:] == 'e':        s = s[:-1]    elif s[-2:] == 'ed':        s = s[:-2]    elif s[-1:] == 'y':        s = s[:-1] + 'i'    elif s[-2:] == 'er':        s = s[:-2]    elif s[-1] == 's':        if s[-2:] == 'es':            s = s[:-2]        elif s[-3:] == 'ers':            s = s[:-3]        else:             s = s[:-1]    elif s[-3:] == 'est':        if len(s) == 4 or len(s) == 5:            s = s        else:            if s[-4] == s[-5] and s != 'tall':                s = s[:-4]            else:                s = s[:-3]    elif s[-3:] == 'ful':        s = s[:-3]    elif s[-2:] == 'ly':        s = s[:-2]    elif s[-4:] == 'less':        s = s[:-4]    elif s[:-3] == 'ing':        if s[-4] == s[-5]:            s = s[:-4]        else:            s = s[:-3]    return s    def compare_dictionaries(d1, d2):    """takes two features, dictionaries d1 and d2, as inputs,       and it should compute and return their log similarity scor    """    log_sim_score = 0    total = 0    for word in d1:        total += d1[word]        for word in d2:        if (word in d1) == True:            add_score = (d2[word] * math.log(d1[word]/total))            log_sim_score += add_score            print        else:            add_score = (d2[word] * math.log(.5/total))            log_sim_score += add_score        return log_sim_scoredef score_assessment(scores1, scores2):    """a helper function that assesses whether a list of scores from source1,       scores1, has more elements that are greater than the list of scores from source2,       scores2    """    count1 = 0    count2 = 0    for i in range(len(scores1)):        if scores1[i] > scores2[i]:            count1 += 1        elif scores1[i] < scores2[i]:            count2 += 2        else:            count1 += 1            count2 += 1                if count1 > count2:        return True    elif count1 < count2:        return False                    #----------------------Beginning of Class----------------------class TextModel():    def __init__(self, model_name):        """constructs a new TextModel object           by accepting a string model_name as a           parameter        """        self.name = model_name        self.words = {}        self.word_lengths = {}        self.stems = {}        self.sentence_lengths = {}        self.punctuation = {}            def __repr__(self):        """returns a string that includes the name           of the model as well as the sizes of the           dictionaries for each feature of the text.        """        s = 'text model name: ' + self.name + '\n'        s += '  number of words: ' + str(len(self.words)) + '\n'        s += '  number of word lengths: ' + str(len(self.word_lengths)) + '\n'        s += '  number of stems: ' + str(len(self.stems)) + '\n'        s += '  number of sentence lengths: ' + str(len(self.sentence_lengths)) + '\n'        s += '  number of punctuation marks: ' + str(len(self.punctuation))        return s            def add_string(self, s):        """adds a string of text s to the model           by augmenting the feature dictionaries           defined in the constructor.        """        sentences = split_sentences(s)                for sen in sentences:            length_of_sentence = len(sen)            if length_of_sentence in self.sentence_lengths:                self.sentence_lengths[length_of_sentence] += 1            else:                self.sentence_lengths[length_of_sentence] = 1                word_list = clean_text(s)                 for w in word_list:            if w in self.words:                self.words[w] += 1            else:                self.words[w] = 1                for w in word_list:             if len(w) in self.word_lengths:                self.word_lengths[len(w)] += 1            else:                self.word_lengths[len(w)] = 1                for w in word_list:                stem_word = stem(w)                if stem_word in self.stems:                    self.stems[stem_word] += 1                else:                    self.stems[stem_word] = 1                        for char in s:            if char in """.?,;!:'()[]"-{}*""":                if char in self.punctuation:                    self.punctuation[char] += 1                else:                    self.punctuation[char] = 1      def similarity_scores(self, other):        """computes and returns a list of log similarity scores measuring           the similarity of self and other (one score for each type of feature)        """                word_score = compare_dictionaries(other.words, self.words)        word_lengths_score = compare_dictionaries(other.word_lengths, self.word_lengths)        stems_score = compare_dictionaries(other.stems, self.stems)        sentence_lengths_score = compare_dictionaries(other.sentence_lengths, self.sentence_lengths)                  punctuation_score = compare_dictionaries(other.punctuation, self.punctuation)        return [word_score, word_lengths_score, stems_score, sentence_lengths_score, punctuation_score]            def classify(self, source1, source2):        """compares the called TextModel object (self) to two other "source"           TextModel objects (source1 and source2) and determines which of these           other TextModels is the more likely source of the called TextModel        """        scores1 = self.similarity_scores(source1)        scores2 = self.similarity_scores(source2)        print("scores for " + str(source1.name) + ": " + str(scores1))        print("scores for " + str(source2.name) + ": " + str(scores2))        assessment = score_assessment(scores1, scores2)        if assessment == True:            print(str(self.name) + " is more likely to have come from " + str(source1.name))        elif assessment == False:            print(str(self.name) + " is more likely to have come from " + str(source2.name))        else: print(str(self.name) + " is more likely to have come from either")                def add_file(self, filename):        """adds a file, reads the text, and adds the text to the TextModel object        """        file = open(filename, 'r', encoding='utf8', errors='ignore')        text = file.read()        file.close()        self.add_string(text)            def save_model(self):        """saves the TextModel object self by writing           its various feature dictionaries to files. There will           be one file written for each feature dictionary.        """        filename = self.name + '_' + "words"        d = self.words        f = open(filename, 'w')        f.write(str(d))        f.close()                filename = self.name + '_' + "word_lengths"        d = self.word_lengths        f = open(filename, 'w')        f.write(str(d))        f.close()                filename = self.name + '_' + "sentence_lengths"        d = self.sentence_lengths        f = open(filename, 'w')        f.write(str(d))        f.close()                filename = self.name + '_' + "stems"        d = self.stems        f = open(filename, 'w')        f.write(str(d))        f.close()                filename = self.name + '_' + "punctuation"        d = self.punctuation        f = open(filename, 'w')        f.write(str(d))        f.close()            def read_model(self):        filename = self.name + '_' + "words"        f = open(filename, 'r')           words = f.read()                   f.close()        self.words = dict(eval(words))                 filename = self.name + '_' + "word_lengths"        f = open(filename, 'r')           word_lengths = f.read()                   f.close()        self.word_lengths = dict(eval(word_lengths))                filename = self.name + '_' + "sentence_lengths"        f = open(filename, 'r')           sentence_lengths = f.read()                   f.close()        self.sentence_lengths = dict(eval(sentence_lengths))                 filename = self.name + '_' + "stems"        f = open(filename, 'r')           stems = f.read()                   f.close()        self.stems = dict(eval(stems))                 filename = self.name + '_' + "punctuation"        f = open(filename, 'r')           punctuation = f.read()                   f.close()        self.punctuation = dict(eval(punctuation))                     